{"version":3,"sources":["../src/AttributeTypeAndValue.js"],"names":["AttributeTypeAndValue","constructor","parameters","type","defaultValues","value","fromSchema","schema","memberName","Error","names","asn1js","Sequence","name","blockName","ObjectIdentifier","Any","asn1","compareSchema","verified","result","valueBlock","toString","typeValue","toSchema","toJSON","_object","Object","keys","length","isEqual","compareTo","stringBlockNames","Utf8String","BmpString","UniversalString","NumericString","PrintableString","TeletexString","VideotexString","IA5String","GraphicString","VisibleString","GeneralString","CharacterString","isString","thisName","value1","value2","localeCompare","valueBeforeDecode","ArrayBuffer"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\nimport { stringPrep } from \"./common.js\";\n//**************************************************************************************\n/**\n * Class from RFC5280\n */\nexport default class AttributeTypeAndValue\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttributeTypeAndValue class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {string}\n\t\t * @desc type\n\t\t */\n\t\tthis.type = getParametersValue(parameters, \"type\", AttributeTypeAndValue.defaultValues(\"type\"));\n\t\t/**\n\t\t * @type {Object}\n\t\t * @desc Value of the AttributeTypeAndValue class\n\t\t */\n\t\tthis.value = getParametersValue(parameters, \"value\", AttributeTypeAndValue.defaultValues(\"value\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"type\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"value\":\n\t\t\t\treturn {};\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttributeTypeAndValue class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttributeTypeAndValue ::= Sequence {\n\t *    type     AttributeType,\n\t *    value    AttributeValue }\n\t *\n\t * AttributeType ::= OBJECT IDENTIFIER\n\t *\n\t * AttributeValue ::= ANY -- DEFINED BY AttributeType\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName] Name for entire block\n\t\t * @property {string} [type] Name for \"type\" element\n\t\t * @property {string} [value] Name for \"value\" element\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.type || \"\") }),\n\t\t\t\tnew asn1js.Any({ name: (names.value || \"\") })\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\tstatic blockName()\n\t{\n\t\treturn \"AttributeTypeAndValue\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"type\",\n\t\t\t\"typeValue\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttributeTypeAndValue.schema({\n\t\t\t\tnames: {\n\t\t\t\t\ttype: \"type\",\n\t\t\t\t\tvalue: \"typeValue\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeTypeAndValue\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.type = asn1.result.type.valueBlock.toString();\n\t\t// noinspection JSUnresolvedVariable\n\t\tthis.value = asn1.result.typeValue;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.type }),\n\t\t\t\tthis.value\n\t\t\t]\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst _object = {\n\t\t\ttype: this.type\n\t\t};\n\n\t\tif(Object.keys(this.value).length !== 0)\n\t\t\t_object.value = this.value.toJSON();\n\t\telse\n\t\t\t_object.value = this.value;\n\n\t\treturn _object;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Compare two AttributeTypeAndValue values, or AttributeTypeAndValue with ArrayBuffer value\n\t * @param {(AttributeTypeAndValue|ArrayBuffer)} compareTo The value compare to current\n\t * @returns {boolean}\n\t */\n\tisEqual(compareTo)\n\t{\n\t\tconst stringBlockNames = [\n\t\t\tasn1js.Utf8String.blockName(),\n\t\t\tasn1js.BmpString.blockName(),\n\t\t\tasn1js.UniversalString.blockName(),\n\t\t\tasn1js.NumericString.blockName(),\n\t\t\tasn1js.PrintableString.blockName(),\n\t\t\tasn1js.TeletexString.blockName(),\n\t\t\tasn1js.VideotexString.blockName(),\n\t\t\tasn1js.IA5String.blockName(),\n\t\t\tasn1js.GraphicString.blockName(),\n\t\t\tasn1js.VisibleString.blockName(),\n\t\t\tasn1js.GeneralString.blockName(),\n\t\t\tasn1js.CharacterString.blockName()\n\t\t];\n\n\t\tif(compareTo.constructor.blockName() === AttributeTypeAndValue.blockName())\n\t\t{\n\t\t\tif(this.type !== compareTo.type)\n\t\t\t\treturn false;\n\n\t\t\t//region Check we do have both strings\n\t\t\tlet isString = false;\n\t\t\tconst thisName = this.value.constructor.blockName();\n\n\t\t\tif(thisName === compareTo.value.constructor.blockName())\n\t\t\t{\n\t\t\t\tfor(const name of stringBlockNames)\n\t\t\t\t{\n\t\t\t\t\tif(thisName === name)\n\t\t\t\t\t{\n\t\t\t\t\t\tisString = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//endregion\n\n\t\t\tif(isString)\n\t\t\t{\n\t\t\t\tconst value1 = stringPrep(this.value.valueBlock.value);\n\t\t\t\tconst value2 = stringPrep(compareTo.value.valueBlock.value);\n\n\t\t\t\tif(value1.localeCompare(value2) !== 0)\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse // Comparing as two ArrayBuffers\n\t\t\t{\n\t\t\t\tif(isEqualBuffer(this.value.valueBeforeDecode, compareTo.value.valueBeforeDecode) === false)\n\t\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif(compareTo instanceof ArrayBuffer)\n\t\t\treturn isEqualBuffer(this.value.valueBeforeDecode, compareTo);\n\n\t\treturn false;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"],"file":"AttributeTypeAndValue.js"}